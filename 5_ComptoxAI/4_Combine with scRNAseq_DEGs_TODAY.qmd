---
title: "Combine proteomics and scRNAseq data"
format: html
editor_options: 
  chunk_output_type: console
---


```{r setup}
# Sandbox analysis
source(here::here("1_project_setup/!libraries.R"))
source(here::here("1_project_setup/!directories.R"))
source(here::here("1_project_setup/!load_clean_data.R"))
library(ComplexUpset)
```


# I. Read in scRNAseq DEGs ----
```{r read scRNAseq}
# Read and combine all CSV files into a single data frame, adding a column for file names
scRNAseq_deg <- list.files(path = fs::path(dir_data, "scRNAseq DEGs"),
                           pattern = "*.csv", 
                           full.names = TRUE) %>%
  set_names(.) %>%
  map_df(~ read_csv(.x) %>% 
           mutate(file_name = tools::file_path_sans_ext(basename(.x))))

# Rename first col
scRNAseq_deg <- scRNAseq_deg |> 
  dplyr::rename("gene" = 1) |> 
  dplyr::mutate(
    file_name = str_remove(file_name, ".de.markers"),
    cell_type_time = str_remove(file_name, "PFNAvsCTR_"),
    week = if_else(str_detect(file_name, "week1"), "week 1", "week 2"),
    cell_type = str_remove(cell_type_time, "week1_") |> 
      str_remove("week2_"))

# table(scRNAseq_deg2$cell_type_time)
# table(scRNAseq_deg2$cell_type)

# Add variable to identify top DEGs
scRNAseq_deg <- scRNAseq_deg |>
  dplyr::mutate(
    top_scrnaseq = ifelse(abs(avg_log2FC) > quantile(abs(avg_log2FC), 0.5),1,0))

# Create filtered data frame with p<0.05
scRNAseq_deg_sig_p05 <- scRNAseq_deg |>
  tidylog::filter(p_val<0.05)

# Filter significant only
scRNAseq_deg_sig_fdr05 <- scRNAseq_deg |>
  tidylog::filter(p_val_adj<0.05)
table(scRNAseq_deg_sig_fdr05$week)

length(unique(scRNAseq_deg_sig_fdr05$gene))

# Pivot wider for merge
sc_fdr05_w_pvals <- scRNAseq_deg_sig_fdr05 |> 
  tidylog::select(gene, p_val, cell_type_time) |> 
  pivot_wider(id_cols = gene, 
              names_from = cell_type_time, 
              values_from = p_val) |> 
  mutate(sc_gene = "sig scRNAseq") |>
  janitor::clean_names()
```


# II. Proteomics meet in middle results ----
```{r read proteomics}
# Mediation result s:
# mediation_res <- read_csv(
#   fs::path(dir_results, "med_res_df_020924.csv"))

# Meet in middle results:
mim_res_all <- read_csv(
  fs::path(dir_results, "meet_in_middle_res_all_072924.csv")) |> 
  tidylog::filter(omic_layer == "Proteomics") |> 
  tidylog::select(-omic_layer, -EntrezGeneSymbol)

# Results of all mediation analyses
mediation_res_all_pairwise <- read_csv(
  fs::path(dir_results, "pairwise_mediation_result.csv"))

# Combine protein metadata and proteomics results
mediation_res_all <- tidylog::inner_join(mediation_res_all_pairwise, 
                                         mim_res_all,
                                         by = c("AptName" = "feature_name")) 

# For now, since we didnt include an interaction, we can exclude the .T and 
# .C vars from the mediation results
mediation_res_all <- mediation_res_all |>
  tidylog::select(-contains(".T"), 
                  -contains(".C"), 
                  # -contains(".pval"),
                  -contains(".hi"), 
                  -contains(".lo")) |>
  rename_all(~str_remove(., ".avg")) |> 
  relocate(var_name, .before = nobs)


# Split gene names by | to get individual rows
mediation_res_all <- mediation_res_all %>%
  tidyr::separate_longer_delim(EntrezGeneSymbol, "|") 


# Calculate type of significance for each protein
mediation_res_all <- mediation_res_all |> 
  dplyr::mutate(
    sig_mim_p05 = case_when(
      p_value_em < 0.05 & p_value_mo < 0.05 ~ "Both significant", 
      p_value_em < 0.05 ~ "Exposure-Mediator significant",
      p_value_mo < 0.05 ~ "Mediator-Outcome significant",
      TRUE ~ "Neither significant"),
    sig_mim_efnumtst = case_when(
      sig_efnum_em == "Sig" & sig_efnum_mo == "Sig" ~ "Both significant", 
      sig_efnum_em == "Sig" ~ "Exposure-Mediator significant", 
      sig_efnum_mo == "Sig" ~ "Mediator-Outcome significant", 
      TRUE ~ "Neither significant") 
  )

table(mediation_res_all$sig_mim_p05)
table(mediation_res_all$sig_mim_efnumtst)


# Clean gene names- remove na genes and select that with the largest PMed
mediation_res_all <- mediation_res_all |>
  tidylog::filter(!is.na(EntrezGeneSymbol)) |>
  group_by(EntrezGeneSymbol) |>
  tidylog::filter(abs(PMed) == max(abs(PMed))) |>
  slice_head() |>
  ungroup()


table(mediation_res_all$sig_mim_p05)
# table(mediation_res_all2$sig_mim_p05)

```


# III. Combine data from proteomics and scRNAseq ----
```{r combine and create upset}
# 1. Combine in wide format (better for comptoxai) ----
full_data_sig_w <- mediation_res_all |> 
  tidylog::filter(sig_mim_p05 != "Neither significant") |>
  tidylog::full_join(sc_fdr05_w_pvals, by = c("EntrezGeneSymbol" = "gene")) |> 
  tidylog::select(-AptName, -c(var_name:ADE.pval))


# Create variable that combines scRNAseq and proteomics results
full_data_sig_w <- full_data_sig_w |> 
  dplyr::mutate(
    sig_overall_with_efnumtests = case_when(
      sig_mim_p05 == "Both significant" & !is.na(sc_gene) ~ "scRNAseq & TODAY Sig p_05 in MIM", 
      sig_efnum_em == "Sig" & !is.na(sc_gene)             ~ "scRNAseq & TODAY E->M efnumtests",
      sig_efnum_mo == "Sig" & !is.na(sc_gene)             ~ "scRNAseq & TODAY M->O efnumtests",
      # sig_efnum_em == "Sig" & sig_efnum_mo == "Sig" & !is.na(sc_gene) ~ "TODAY sig efnumtest both MIM",
      sig_efnum_em == "Sig" &  is.na(sc_gene) ~ "TODAY E->M only efnumtests",
      sig_efnum_mo == "Sig" &  is.na(sc_gene) ~ "TODAY M->O only efnumtests",
      p_value_em < 0.05 & !is.na(sc_gene) ~ "scRNAseq & TODAY E->M p_05",
      p_value_em < 0.05 & !is.na(sc_gene) ~ "scRNAseq & TODAY M->O p_05",
      !is.na(sc_gene) &  p_value_em > 0.05 & sig_efnum_mo > 0.05 ~ "scRNAseq only",
      !is.na(sc_gene) &  is.na(sig_mim_p05) ~ "scRNAseq only",
      is.na(sc_gene) &  !is.na(sig_mim_p05) ~ paste("TODAY", sig_mim_p05),
      TRUE ~ "check"), 
    sig_overall = case_when(
      sig_mim_p05 == "Both significant" & !is.na(sc_gene) ~ "scRNAseq & TODAY MIM", 
      is.na(sig_mim_p05)  & !is.na(sc_gene) ~ "scRNAseq only",
      !is.na(sig_mim_p05)  & !is.na(sc_gene) ~ paste("scRNAseq & TODAY", sig_mim_p05), 
      !is.na(sig_mim_p05) & is.na(sc_gene) ~ paste("TODAY only", sig_mim_p05), 
      is.na(sig_mim_p05) & is.na(sc_gene) ~ "Not Significant", 
      TRUE ~ "check"), 
    sig_overall = str_replace(sig_overall, "Both significant", "MIM") |> 
      str_replace("Exposure-Mediator significant", "PFNA->Protein")   |>
      str_replace("Mediator-Outcome significant", "Protein->DKD"), 
    sig_overall_simplified = case_when(
      str_detect(sig_overall, "scRNAseq & TODAY") ~ "Both", 
      str_detect(sig_overall, "TODAY only") ~ "TODAY",
      str_detect(sig_overall, "scRNAseq only") ~ "scRNAseq",
      TRUE ~ "check"))


table(full_data_sig_w$sig_overall)

overlapping_genes <- full_data_sig_w |> 
  tidylog::filter(sig_overall_simplified == "Both") |> 
  dplyr::select(EntrezGeneSymbol, sig_overall, everything())

overlapping_sig <- full_data_sig_w |> 
  tidylog::filter(sig_overall == "scRNAseq & TODAY MIM") |> 
  dplyr::select(EntrezGeneSymbol, sig_overall, everything())


# Save data (change if needed to indicate which significance threshold is used)

write_csv(full_data_sig_w,
          fs::path(dir_results,
                   "Combined_proteomics_scRNAseq_sig_fdr_results_090924.csv"))

table(is.na(full_data_sig_w$EntrezGeneSymbol))
# 2. Combining in Long formate (best for upset plot) -----
# Perform further cleaning for combining in long format
## a. Mediation results ----
mediation_res_l <- mediation_res_all |> 
  tidylog::select(EntrezGeneSymbol, p_value_em, p_value_mo) |> 
  tidylog::filter(p_value_em < 0.05 | p_value_mo < 0.05) |> 
  tidylog::pivot_longer(cols = c(p_value_em, p_value_mo), 
                        names_to = "variable", 
                        values_to = "p_val") |> 
  tidylog::rename(gene = EntrezGeneSymbol)%>%
  filter(p_val < 0.05)

# proteins measured
measured_today <- tibble(gene = unique(mediation_res_all$EntrezGeneSymbol), 
                         variable = "Measured in TODAY", 
                         value = 1)
## b. scRNAseq results ----

# All measured genes
measured_scrnaseq <- tibble(gene = unique(scRNAseq_deg$gene), 
                            variable = "Measured in scRNAseq", 
                            value = 1)
# sig genes
sig_scrnaseq <- tibble(gene = unique(scRNAseq_deg$gene[scRNAseq_deg$p_val_adj<0.05]), 
                       variable = "Significant in scRNAseq", 
                       value = 1)

## a. Combine datasets ------
alldat <- bind_rows(mediation_res_l, 
                    # measured_today,
                    # scRNAseq_deg_l,
                    sig_scrnaseq,
                    # measured_scrnaseq
) |>
  tidylog::mutate(variable = case_when(
    variable == "p_value_em" ~ "PFNA in TODAY",
    variable == "p_value_mo" ~ "DKD in TODAY",
    TRUE ~ variable)) 


# Calculate value to indicate if the gene should be included in each category
# CHANGE HERE TO MAKE FDR THRESHOLDS FOR THE UPSET PLOT
alldat <- alldat |> 
  tidylog::mutate(
    value = case_when(
      is.na(value) ~ p_val < 0.05, 
      TRUE ~ value)) |> 
  tidylog::select(gene, variable, value)

# Summarize into dataset for upset plot 
upset_dat <- alldat |> 
  pivot_wider(names_from = variable, id_cols = "gene") |>
  dplyr::mutate(across(where(is.numeric), function(x){replace_na(x, 0)}))

```


# IV. Upset plot
```{r}
vars_to_plot <- upset_dat |> tidylog::select(-gene) |> colnames()

upset_metadata = data.frame(
  set=c("PFNA in TODAY", "DKD in TODAY", vars_to_plot[-c(1:2)]),
  dataset=c("TODAY", "TODAY", rep("scRNAseq", length(vars_to_plot)-2))
)

# Upset plot ----
vars_to_plot <- upset_dat |> tidylog::select(-gene) |> colnames()

upset(data = upset_dat, 
      intersect = vars_to_plot, 
      stripes=upset_stripes(
        data=upset_metadata,
        mapping=aes(color=dataset)
      ))
```

